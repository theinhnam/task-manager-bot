import discord
from discord.ext import commands
from database import Session, Project, Task
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pandas as pd
import os
import re
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv

load_dotenv()

# --- C·∫•u h√¨nh Timezone Vi·ªát Nam (UTC+7) ---
VIETNAM_TZ = timezone(timedelta(hours=7))

# --- Bot Setup ---
intents = discord.Intents.default()
intents.messages = True
bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)
scheduler = AsyncIOScheduler(timezone=str(VIETNAM_TZ))

# --- Helper Functions ---
def to_vietnam_time(utc_dt):
    return utc_dt.astimezone(VIETNAM_TZ) if utc_dt else None

def parse_custom_time(time_str):
    """X·ª≠ l√Ω c√°c ƒë·ªãnh d·∫°ng th·ªùi gian ph·ªï bi·∫øn c·ªßa ng∆∞·ªùi Vi·ªát"""
    now = datetime.now(VIETNAM_TZ)
    
    # X·ª≠ l√Ω gi·ªù ƒë∆°n gi·∫£n: 14h, 14h30, 14:30
    if re.match(r"^\d{1,2}h?\d*$", time_str):
        time_str = time_str.replace('h', ':').replace(' ', '')
        if ':' not in time_str:
            time_str += ':00'
    
    try:
        # Th·ª≠ ƒë·ªãnh d·∫°ng HH:MM
        if re.match(r"^\d{1,2}:\d{2}$", time_str):
            hours, minutes = map(int, time_str.split(':'))
            return now.replace(hour=hours, minute=minutes, second=0, microsecond=0)
        
        # Th·ª≠ ƒë·ªãnh d·∫°ng dd/mm HH:MM
        if re.match(r"^\d{1,2}/\d{1,2} \d{1,2}:\d{2}$", time_str):
            date_part, time_part = time_str.split(' ')
            day, month = map(int, date_part.split('/'))
            hours, minutes = map(int, time_part.split(':'))
            return now.replace(day=day, month=month, hour=hours, minute=minutes, second=0, microsecond=0)
        
        # Th·ª≠ ƒë·ªãnh d·∫°ng dd/mm
        if re.match(r"^\d{1,2}/\d{1,2}$", time_str):
            day, month = map(int, time_str.split('/'))
            return now.replace(day=day, month=month, hour=12, minute=0, second=0, microsecond=0)
        
    except ValueError:
        return None
    
    return None

def create_item_embed(item, title):
    """T·∫°o embed cho c·∫£ task v√† note"""
    embed = discord.Embed(title=title, color=0x3498db)
    
    if item.due_date:
        due_vn = to_vietnam_time(item.due_date)
        time_info = f"‚è∞ {due_vn.strftime('%d/%m %H:%M')}"
    else:
        time_info = "üìù Ghi ch√∫"
    
    embed.add_field(name="D·ª± √°n", value=item.project_name, inline=True)
    embed.add_field(name="Lo·∫°i", value=time_info, inline=True)
    embed.add_field(name="N·ªôi dung", value=item.content, inline=False)
    
    return embed

# --- Bot Commands ---
@bot.command()
async def helpme(ctx):
    """G·ª≠i h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
    embed = discord.Embed(title="üìù TaskMaster Bot Help", color=0x2ecc71)
    commands_list = [
        ("!project <t√™n>", "T·∫°o d·ª± √°n m·ªõi"),
        ("!add <d·ª± √°n> <th·ªùi gian?> <n·ªôi dung>", "Th√™m task/note (nhi·ªÅu m·ª•c c√°ch nhau b·∫±ng d√≤ng)"),
        ("!today", "Xem task h√¥m nay"),
        ("!notes", "Xem t·∫•t c·∫£ ghi ch√∫"),
        ("!list <d·ª± √°n>", "Xem t·∫•t c·∫£ task/note c·ªßa d·ª± √°n"),
        ("!export <d·ª± √°n>", "Xu·∫•t ra Excel")
    ]
    for cmd, desc in commands_list:
        embed.add_field(name=cmd, value=desc, inline=False)
    
    embed.set_footer(text="üìå C√°ch nh·∫≠p th·ªùi gian: 14h, 14h30, 14:30, 15/12, 15/12 14h30")
    await ctx.send(embed=embed)

@bot.command()
async def project(ctx, name):
    """T·∫°o d·ª± √°n m·ªõi"""
    session = Session()
    try:
        project = Project(name=name, user_id=str(ctx.author.id))
        session.add(project)
        session.commit()
        await ctx.send(f"‚úÖ ƒê√£ t·∫°o d·ª± √°n **{name}**!")
    finally:
        session.close()

@bot.command()
async def add(ctx, project_name, *, content):
    """
    Th√™m task/note v√†o d·ª± √°n
    C√°ch s·ª≠ d·ª•ng:
    !add D·ª±√°nA
    N·ªôi dung 1 @ 14h30
    N·ªôi dung 2
    N·ªôi dung 3 @ 15/12
    """
    session = Session()
    try:
        items = []
        lines = content.split('\n')
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            # T√°ch th·ªùi gian n·∫øu c√≥ (s·ª≠ d·ª•ng @ ƒë·ªÉ ƒë√°nh d·∫•u)
            time_match = re.search(r'@\s*(.+)$', line)
            due_date = None
            
            if time_match:
                time_str = time_match.group(1).strip()
                line = re.sub(r'@\s*.+$', '', line).strip()
                due_date = parse_custom_time(time_str)
                
                if not due_date:
                    await ctx.send(f"‚ö†Ô∏è ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá: `{time_str}`. S·ª≠ d·ª•ng: 14h30, 15/12, 15/12 14h30")
                    continue
            
            # T·∫°o task/note m·ªõi
            item = Task(
                project_name=project_name,
                content=line,
                due_date=due_date,
                user_id=str(ctx.author.id)
            )
            session.add(item)
            items.append(item)
        
        session.commit()
        
        # L√™n l·ªãch th√¥ng b√°o cho c√°c task c√≥ th·ªùi h·∫°n
        for item in items:
            if item.due_date:
                scheduler.add_job(
                    notify_user,
                    'date',
                    run_date=item.due_date - timedelta(minutes=10),
                    args=[ctx.author.id, item.id, "‚è∞ Task s·∫Øp ƒë·∫øn h·∫°n (10 ph√∫t)"]
                )
                scheduler.add_job(
                    notify_user,
                    'date',
                    run_date=item.due_date,
                    args=[ctx.author.id, item.id, "üîî Task ƒë·∫øn h·∫°n!"]
                )
        
        await ctx.send(f"‚úÖ ƒê√£ th√™m {len(items)} m·ª•c v√†o **{project_name}**!")
    except Exception as e:
        await ctx.send(f"‚ùå L·ªói: {str(e)}")
    finally:
        session.close()

# --- Notification Handler ---
async def notify_user(user_id, task_id, message):
    user = await bot.fetch_user(user_id)
    session = Session()
    try:
        task = session.query(Task).get(task_id)
        if task:
            embed = create_item_embed(task, message)
            await user.send(embed=embed)
            
            # ƒê√°nh d·∫•u ƒë√£ th√¥ng b√°o
            if "10 minutes" in message:
                task.notified_10min = True
            else:
                task.notified_due = True
            session.commit()
    finally:
        session.close()

# --- Task/Note Listing ---
@bot.command()
async def today(ctx):
    """Hi·ªÉn th·ªã task h√¥m nay"""
    session = Session()
    try:
        now = datetime.now(VIETNAM_TZ)
        start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        end = now.replace(hour=23, minute=59, second=59, microsecond=999999)
        
        tasks = session.query(Task).filter(
            Task.user_id == str(ctx.author.id),
            Task.due_date >= start,
            Task.due_date <= end
        ).all()
        
        if not tasks:
            await ctx.send("üéâ B·∫°n kh√¥ng c√≥ task n√†o h√¥m nay!")
            return
        
        embed = discord.Embed(
            title=f"üìÖ Task H√¥m Nay ({now.strftime('%d/%m')})",
            color=0x3498db
        )
        
        for task in tasks:
            due_vn = to_vietnam_time(task.due_date)
            time_str = due_vn.strftime("%H:%M")
            embed.add_field(
                name=f"{task.project_name} - {time_str}",
                value=task.content,
                inline=False
            )
        
        await ctx.send(embed=embed)
    finally:
        session.close()

@bot.command()
async def notes(ctx):
    """Hi·ªÉn th·ªã t·∫•t c·∫£ ghi ch√∫"""
    session = Session()
    try:
        notes = session.query(Task).filter(
            Task.user_id == str(ctx.author.id),
            Task.due_date.is_(None)
        ).all()
        
        if not notes:
            await ctx.send("üì≠ B·∫°n ch∆∞a c√≥ ghi ch√∫ n√†o!")
            return
        
        embed = discord.Embed(
            title="üìù T·∫•t C·∫£ Ghi Ch√∫",
            color=0xffcc00
        )
        
        for note in notes:
            embed.add_field(
                name=f"{note.project_name}",
                value=note.content,
                inline=False
            )
        
        await ctx.send(embed=embed)
    finally:
        session.close()

@bot.command()
async def list(ctx, project_name):
    """Li·ªát k√™ t·∫•t c·∫£ task/note trong d·ª± √°n"""
    session = Session()
    try:
        items = session.query(Task).filter(
            Task.user_id == str(ctx.author.id),
            Task.project_name == project_name
        ).order_by(Task.due_date.asc()).all()
        
        if not items:
            await ctx.send(f"üì≠ Kh√¥ng c√≥ m·ª•c n√†o trong **{project_name}**!")
            return
        
        embed = discord.Embed(
            title=f"üìã T·∫•t C·∫£ M·ª•c Trong {project_name}",
            color=0x9b59b6
        )
        
        for item in items:
            if item.due_date:
                due_vn = to_vietnam_time(item.due_date)
                time_info = f"‚è∞ {due_vn.strftime('%d/%m %H:%M')}"
            else:
                time_info = "üìù Ghi ch√∫"
            
            embed.add_field(
                name=time_info,
                value=item.content,
                inline=False
            )
        
        await ctx.send(embed=embed)
    finally:
        session.close()

# --- Excel Export ---
@bot.command()
async def export(ctx, project_name):
    """Xu·∫•t task/note ra Excel"""
    session = Session()
    try:
        items = session.query(Task).filter(
            Task.user_id == str(ctx.author.id),
            Task.project_name == project_name
        ).all()
        
        if not items:
            await ctx.send(f"üì≠ Kh√¥ng c√≥ m·ª•c n√†o trong **{project_name}**!")
            return
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu
        data = []
        for item in items:
            if item.due_date:
                due_vn = to_vietnam_time(item.due_date)
                due_str = due_vn.strftime("%d/%m/%Y %H:%M")
                item_type = "Task"
            else:
                due_str = "N/A"
                item_type = "Note"
            
            data.append({
                "D·ª± √°n": item.project_name,
                "Lo·∫°i": item_type,
                "N·ªôi dung": item.content,
                "H·∫°n ch√≥t": due_str
            })
        
        # T·∫°o DataFrame
        df = pd.DataFrame(data)
        
        # Xu·∫•t Excel
        filename = f"{project_name}_tasks_notes.xlsx"
        df.to_excel(filename, index=False)
        
        # G·ª≠i file
        await ctx.send(file=discord.File(filename))
        os.remove(filename)
        
    except Exception as e:
        await ctx.send(f"‚ùå L·ªói khi xu·∫•t file: {str(e)}")
    finally:
        session.close()

# --- Security ---
@bot.check
async def dm_only(ctx):
    if not isinstance(ctx.channel, discord.DMChannel):
        await ctx.send("‚ùå Vui l√≤ng ch·ªâ s·ª≠ d·ª•ng bot qua tin nh·∫Øn ri√™ng (DM)!")
        return False
    return True

# --- Startup ---
@bot.event
async def on_ready():
    print(f"Bot ƒë√£ s·∫µn s√†ng: {bot.user.name}")
    scheduler.start()

if __name__ == "__main__":
    bot.run(os.getenv('DISCORD_TOKEN'))